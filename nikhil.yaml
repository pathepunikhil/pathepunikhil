AWSTemplateFormatVersion: 2010-09-09
Resources:
  DeploymentBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref DeploymentBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  AuthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Deny
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
  UnauthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref UnauthRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Deny
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
Outputs:
  Region:
    Description: CloudFormation provider root stack Region
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${AWS::StackName}-Region'
  StackName:
    Description: CloudFormation provider root stack ID
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub '${AWS::StackName}-StackName'
  StackId:
    Description: CloudFormation provider root stack name
    Value: !Ref 'AWS::StackId'
    Export:
      Name: !Sub '${AWS::StackName}-StackId'
  DeploymentBucketName:
    Description: CloudFormation provider root stack deployment bucket name
    Value: !Ref DeploymentBucketName
    Export:
      Name: !Sub '${AWS::StackName}-DeploymentBucketName'
  AuthRoleArn:
    Value: !GetAtt 
      - AuthRole
      - Arn
  UnauthRoleArn:
    Value: !GetAtt 
      - UnauthRole
      - Arn
  AuthRoleName:
    Value: !Ref AuthRole
  UnauthRoleName:
    Value: !Ref UnauthRole
  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyApiGateway
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: MyLambdaFunction
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Handler: index.handler
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const docClient = new AWS.DynamoDB.DocumentClient();
          exports.handler = async function(event) {
            // lambda function code here
          }
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/*'
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: MyDynamoDBTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  DynamoDBPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: DynamoDBPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:DeleteItem'
            Resource: !GetAtt DynamoDBTable.Arn
      Roles:
        - !Ref LambdaExecutionRole
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
